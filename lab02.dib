#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!csharp

#r "nuget: Azure.AI.Projects, *-*"
#r "nuget: Azure.Identity"
#r "nuget: dotenv.net"

#!csharp

using System.IO;
using Azure.AI.Projects;
using Azure.Identity;
using Azure;
using dotenv.net;
using dotenv.net.Utilities;

#!csharp

DotEnv.Load();
var connectionString = EnvReader.GetStringValue("AZURE_AI_AGENT_PROJECT_CONNECTION_STRING");
var deployName = EnvReader.GetStringValue("AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME");

#!csharp

AgentsClient client = new AgentsClient(connectionString, new DefaultAzureCredential());

#!csharp

AgentFile file = await client.UploadFileAsync(
    filePath: "data.txt",
    purpose: AgentFilePurpose.Agents
);
CodeInterpreterToolResource codeInterpreter = new();
codeInterpreter.FileIds.Add(file.Id);

#!csharp

Agent agent = await client.CreateAgentAsync(
    model: deployName,
    name: "data-agent",
    instructions: "You are an AI agent that analyzes the data in the file that has been uploaded. If the user requests a chart, create it and save it as a .png file.",
    tools: [ new CodeInterpreterToolDefinition() ],
    toolResources: new ToolResources() { CodeInterpreter = codeInterpreter }
);

#!csharp

AgentThread thread = await client.CreateThreadAsync();

#!csharp

async Task AddMessageToThread(string message) {
    await client.CreateMessageAsync(
        thread.Id,
        MessageRole.User,
        content: message
    );
}
await AddMessageToThread("What's the category with the highest cost?");

#!csharp

async Task<ThreadRun> RunAndWait() {
    ThreadRun run = await client.CreateRunAsync(thread.Id, agent.Id);
    do
    {
        await Task.Delay(TimeSpan.FromMilliseconds(500));
        run = await client.GetRunAsync(thread.Id, run.Id);
    }
    while (run.Status == RunStatus.Queued
        || run.Status == RunStatus.InProgress);
    return run;
}
ThreadRun run = await RunAndWait();

#!csharp

async Task ShowResult(string runId) =>
    (await client.GetMessagesAsync(thread.Id, runId))
        .Value.Data.Reverse()
        .Where(msg => msg.Role == MessageRole.Agent)
        .SelectMany(msg => msg.ContentItems.OfType<MessageTextContent>())
        .Select(content => content.Text)
        .ToList()
        .ForEach(Console.WriteLine);

await ShowResult(run.Id);

#!csharp

async Task Chat(string message)
{
    await AddMessageToThread(message);
    var run = await RunAndWait();
    await ShowResult(run.Id);
}
await Chat("Create a pie chart showing cost by category");

#!csharp

async Task SaveGeneratedFile(string fileName) {
    var annotations = (await client.GetMessagesAsync(thread.Id)).Value
        .SelectMany(m => m.ContentItems.OfType<MessageTextContent>())
        .SelectMany(c => c.Annotations.OfType<MessageTextFilePathAnnotation>());
    await Task.WhenAll(annotations.Select(a => Save(a, fileName)));
}
async Task Save(MessageTextFilePathAnnotation annotation, string fileName)
{
    BinaryData fileContent = await client.GetFileContentAsync(annotation.FileId);
    string outputPath = $"output/{fileName}";
    await File.WriteAllBytesAsync(outputPath, fileContent.ToArray());
    Console.WriteLine($"saved: {outputPath}");
}
await SaveGeneratedFile("chart.png");

#!html

<img src='output/chart.png''>

#!html

await client.DeleteAgentAsync(agent.Id);

#!html

await client.DeleteThreadAsync(thread.Id);
