#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"name":"csharp","languageName":"csharp"},{"name":"fsharp","languageName":"F#","aliases":["f#","fs"]},{"name":"html","languageName":"HTML"},{"name":"http","languageName":"HTTP"},{"name":"javascript","languageName":"JavaScript","aliases":["js"]},{"name":"mermaid","languageName":"Mermaid"},{"name":"pwsh","languageName":"PowerShell","aliases":["powershell"]},{"name":"value"}]}}

#!csharp

#r "nuget: Azure.AI.Projects, *-*"
#r "nuget: Azure.Identity"
#r "nuget: dotenv.net"

#!csharp

using dotenv.net;
using dotenv.net.Utilities;

#!csharp

DotEnv.Load();

#!csharp

var connectionString = EnvReader.GetStringValue("AZURE_AI_AGENT_PROJECT_CONNECTION_STRING");
var deployName = EnvReader.GetStringValue("AZURE_AI_AGENT_MODEL_DEPLOYMENT_NAME");

#!csharp

using Azure.AI.Projects;
using Azure.Identity;
using Azure;

#!csharp

AgentsClient client = new AgentsClient(connectionString, new DefaultAzureCredential());

#!csharp

Response<Agent> agentResponse = await client.CreateAgentAsync(
    model: deployName,
    name: "data-agent3",
    instructions: "You are an AI agent that analyzes the data in the file that has been uploaded. If the user requests a chart, create it and save it as a .png file.",
    tools: new List<ToolDefinition>
    { 
        new CodeInterpreterToolDefinition() 
    } 
);
Agent agent = agentResponse.Value;

#!csharp

Response<AgentThread> threadResponse = await client.CreateThreadAsync();
AgentThread thread = threadResponse.Value;

#!csharp

AgentFile uploadedAgentFile = await client.UploadFileAsync(
    filePath: "data.txt",
    purpose: AgentFilePurpose.Agents);

#!csharp

List<ToolDefinition> tools = [ new CodeInterpreterToolDefinition() ];
var attachment = new MessageAttachment(fileId: uploadedAgentFile.Id, tools: tools);

#!csharp

public async Task AddMessageToThread(string message, IEnumerable<MessageAttachment> attachments = null) {
    Response<ThreadMessage> messageResponse = await client.CreateMessageAsync(
        thread.Id,
        MessageRole.User,
        content: message,
        attachments: attachments ?? Enumerable.Empty<MessageAttachment>());
}
await AddMessageToThread("What's the category with the highest cost?", new List<MessageAttachment> { attachment });

#!csharp

public async Task RunAndWait() {
    Response<ThreadRun> runResponse = await client.CreateRunAsync(thread.Id, agent.Id);
    do
    {
        await Task.Delay(TimeSpan.FromMilliseconds(500));
        runResponse = await client.GetRunAsync(thread.Id, runResponse.Value.Id);
    }
    while (runResponse.Value.Status == RunStatus.Queued
        || runResponse.Value.Status == RunStatus.InProgress);
}
await RunAndWait();

#!csharp

public async Task ShowResult() {
    Response<PageableList<ThreadMessage>> afterRunMessagesResponse
    = await client.GetMessagesAsync(thread.Id);
    IReadOnlyList<ThreadMessage> messages = afterRunMessagesResponse.Value.Data;
    foreach (ThreadMessage threadMessage in messages)
    {
        Console.Write($"{threadMessage.CreatedAt:yyyy-MM-dd HH:mm:ss} - {threadMessage.Role,10}: ");
        foreach (MessageContent contentItem in threadMessage.ContentItems)
        {
            if (contentItem is MessageTextContent textItem)
            {
                Console.Write(textItem.Text);
            }
            Console.WriteLine();
        }
    }
}
await ShowResult();

#!csharp

public async Task Chat(string message) {
    await AddMessageToThread(message);
    await RunAndWait();
    await ShowResult();
}

await Chat("Create a pie chart showing cost by category");

#!csharp

using System.IO;
public async Task SaveGeneratedFiles() {
    PageableList<ThreadMessage> response = await client.GetMessagesAsync(thread.Id);
    IReadOnlyList<ThreadMessage> messages = response.Data;
    foreach (ThreadMessage threadMessage in messages)
    {
        foreach (MessageContent contentItem in threadMessage.ContentItems)
        {
            if (contentItem is MessageTextContent textItem && textItem.Annotations.Count > 0)
            {
                foreach (var annotation in textItem.Annotations)
                {
                    if (annotation is MessageTextFilePathAnnotation pathAnnotation)
                    {
                        string fileId = pathAnnotation.FileId;
                        AgentFile file = await client.GetFileAsync(fileId);
                        BinaryData fileContent = await client.GetFileContentAsync(fileId);
                        string fileName = Path.GetFileName(file.Filename);
                        await File.WriteAllBytesAsync(fileName, fileContent.ToArray());
                        Console.WriteLine($"saved: {fileName}");
                    }
                }
            }
        }
    }
}
await SaveGeneratedFiles();
